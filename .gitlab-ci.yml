image: docker:latest
services:
  - name : docker:dind  # Docker-in-Docker pour pouvoir utiliser Docker dans le pipeline
    alias: docker

stages:
- Build image
- Security scan
- Test acceptation
- Unit testing
- Integration testing


build:
  #image: docker:latest
  stage: Build image
  # services:
  #   - docker:dind  # Docker-in-Docker pour pouvoir utiliser Docker dans le pipeline
  script:
    - docker build -t alpinehelloworld .  # Construction de l'image avec le tag "alpinehelloworld"
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths: 
      - alpinehelloworld.tar
  rules:
    - changes:
        - Dockerfile
        - webapp/**/*.py
        - scripts/**/*.py       # ou tout autre fichier source impactant ton build
        - path/to/other/files/**  # ajoute ici les dossiers/fichiers nécessaires 
    - when: never


# # Job pour analyser les vulnérabilités de sécurité avec Trivy
# scan_security:
#   stage: Security scan
#   image: aquasec/trivy:0.29.0
#   script:
#     - trivy image --exit-code 1 --no-progress alpinehelloworld  # Lance le scan sur l'image construite
#   allow_failure: false  # Fait échouer le pipeline si des vulnérabilités sont trouvées

# Job pour analyser les vulnérabilités de sécurité avec Trivy
scan_security:
  stage: Security scan
  image: 
    name: aquasec/trivy:0.29.0
    entrypoint: [""]
  script:
    # Utilisation de la commande docker run pour scanner l'image alpinehelloworld
    #- docker run --rm aquasec/trivy image alpinehelloworld --exit-code 1 --no-progress  # Lance le scan sur l'image "alpinehelloworld"
   - trivy image --severity HIGH,CRITICAL --exit-code 0 --input alpinehelloworld.tar --format table --output trivy-report.json #.html, .txt, .json en fonction des types de dcos souhaités :)
  allow_failure: false  # Fait échouer le pipeline si des vulnérabilités sont trouvées
  artifacts:
    paths:
      - trivy-report.json

# Job de test d'acceptation
test acceptance:
  #image: docker:latest
  stage: Test acceptation
  #services:
  #- name: docker:dind  # Docker-in-Docker pour pouvoir exécuter des conteneurs Docker dans le pipeline
  #  alias: docker
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p 80:5000 -e PORT=5000 --name webapp alpinehelloworld  # Lancement du conteneur à partir de l'image "alpinehelloworld"
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep -q "Hello world!"

    # Job de tests unitaires
test_unitaires: 
  stage: Unit testing  
  image: python:3.9-slim  # Utilisation de l'image Docker Python 3.9 allégée
  before_script:
    - pip install --upgrade pip  # Met à jour pip pour garantir qu'il fonctionne avec les dernières versions des paquets
    - pip install -r webapp/requirements.txt  # Installe les dépendances du projet à partir du fichier requirements.txt dans le répertoire 'webapp'
    - pip install pytest  # Installe Pytest pour exécuter les tests unitaires
  script:
    - mkdir -p webapp/tests/results  # Crée le répertoire pour les résultats des tests (si nécessaire)
    - pytest webapp/tests.py --junitxml=webapp/tests/results/report.xml  # Exécute les tests dans le fichier 'tests.py' et génère un rapport XML
  artifacts:
    paths:
      - webapp/tests/results  # Sauvegarde le répertoire contenant les résultats des tests pour qu'il soit accessible dans GitLab CI
    when: always  # Sauvegarde les résultats même si le job échoue, ce qui peut être utile pour déboguer

  allow_failure: false  # Si les tests échouent, le pipeline échoue

test_integration:
  stage: Integration testing
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install -r webapp/requirements.txt
    - pip install pytest
    - pip install --root-user-action=ignore -r requirements.txt
    - export PYTHONPATH=$PYTHONPATH:$(pwd)
    # Démarre éventuellement le serveur ou base de test ici
  script:
    - mkdir -p webapp/tests/results
    - pytest webapp/tests/integration/ --junitxml=webapp/tests/results/integration_report.xml
    
  artifacts:
    paths:
      - webapp/tests/results
    when: always
  allow_failure: false